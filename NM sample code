# Step 1: Install required libraries (if needed)
!pip install pandas scikit-learn

# Step 2: Import libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 3: Load dataset
# You can upload your own dataset or use a sample one
# For demonstration, we'll load the "Fake and Real News" dataset from Kaggle (manually upload)
from google.colab import files
uploaded = files.upload()

# Assuming you uploaded a CSV file named 'news.csv'
df = pd.read_csv('news.csv')  # Change filename if yours is different
df = df[['text', 'label']]  # Ensure correct columns

# Optional: Show class distribution
print(df['label'].value_counts())

# Step 4: Preprocess data
df['label'] = df['label'].map({'REAL': 0, 'FAKE': 1})  # Convert labels to binary

# Split dataset
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)

# Step 5: Vectorize text using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english', max_df=0.7)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Step 6: Train Logistic Regression model
model = LogisticRegression()
model.fit(X_train_tfidf, y_train)

# Step 7: Evaluate model
y_pred = model.predict(X_test_tfidf)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 8: Predict on custom input
def predict_news(news_text):
    tfidf_input = vectorizer.transform([news_text])
    pred = model.predict(tfidf_input)[0]
    return "FAKE" if pred == 1 else "REAL"

# Test prediction
sample = "NASA has discovered a new planet with intelligent life."
print("Prediction:", predict_news(sample))
